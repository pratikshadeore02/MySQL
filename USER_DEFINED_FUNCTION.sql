CREATE DATABASE SALES;
USE SALES;

SELECT * FROM SALES1 LIMIT 5;

DELIMITER $$
CREATE FUNCTION ADD_TO_COLUMN(A INT)
RETURNS INT
DETERMINISTIC
BEGIN
DECLARE B INT ;
SET B = A + 20 ;
RETURN B ;
END $$

CREATE TABLE TEST(
A INT (10),
B VARCHAR(10));

INSERT INTO TEST VALUES(10,'JALPA'),
(20,'BIJAL'),
(30,'RUTVIK')

SELECT * FROM TEST;

SELECT A,ADD_TO_COLUMN(A) FROM TEST;
SELECT ADD_TO_CLOUMN(15);

SELECT QUANTITY,ADD_TO_COLUMN(QUANTITY)FROM SALES1;

DELIMITER $$
CREATE FUNCTION FINAL_PROFITS(PROFIT INT, DISCOUNT INT)
RETURNS INT

BEGIN
DECLARE FINAL_PROFIT INT;
SET FINAL_PROFIT = PROFIT - DISCOUNT ;
RETURN FINAL_PROFIT;
END $$

SELECT DISCOUNT,PROFIT,FINAL_PROFITS(DISCOUNT,PROFIT) FROM SALES1;

DELIMITER $$
CREATE FUNCTION FINAL_PROFITS_REAL(PROFIT DECIMAL(20,4),
DISCOUNT DECIMAL(10,4), SALES DECIMAL(10,4) )
RETURNS INT
DETERMINISTIC
BEGIN
DECLARE FINAL_PROFIT INT ;
SET FINAL_PROFIT = PROFIT-SALES * DRSCOUNT;
RETURN FINAL_PROFIT;
END $$

SELECT DISCOUNT,PROFIT,SALES,FINAL_PROFITS_REAL(DISCOUNT,PROFIT,SALES) AS "FINAL PROFIT" FROM SALES1;

DELIMITER $$
CREATE FUNCTION MARK_SALES2(SALES INT )
RETURNS VARCHAR(30)
DETERMINISTIC
BEGIN
DECLARE FLAG_SALES VARCHAR(30) ;
IF SALES <= 100 THEN
SET FLAG_SALES = " SUPER AFFORDABLE PRODUCT" ;
ELSEIF SALES > 100 AND SALES < 300 THEN
SET FLAG_SALES = " AFFORDABLE" ;
ELSEIF SALES > 300 AND SALES < 600 THEN 
SET FLAG_SALES = " MODERATE PRICE" ;
ELSE 
SET FLAG_SALES = " EXPENSIVE" ;
END IF ;
RETURN FLAG_SALES;
END $$

SELECT SALES,MARK_SALES2(SALES) FROM SALES1;

CREATE TABLE LOOP_TABLE(VAL INT)
## CREATE LOOP

DELIMITER $$ 
CREATE PROCEDURE INSER_DATA()
BEGIN 
SET @VAR = 10;
GENERATE_DATA : LOOP
INSERT INTO LOOP_TABLE VALUES (@VAR);
SET @VAR = @VAR + 1;
IF @VAR = 100 THEN 
LEAVE GENERATE_DATA;
END IF ;
END LOOP GENERATE_DATA; 
END $$

CALL INSER_DATA();
SELECT * FROM LOOP_TABLE;

CREATE TABLE EMPLOYEE(
FIRST_NAME VARCHAR(50),
LAST_NAME VARCHAR(50),
AGE INT ,
DEPARTMENT VARCHAR(50),
SALARY DECIMAL(10,2)
);


INSERT INTO employee (first_name, last_name, age, department, salary)
VALUES
('John', 'Doe', 30, 'HR', 50000.00),
('Jane', 'Smith', 27, 'IT', 60000.00),
('Mike', 'Brown', 35, 'Finance', 75000.00),
('Sara', 'Johnson', 29, 'Marketing', 55000.00),
('David', 'White', 40, 'Sales', 80000.00),
('Emily', 'Taylor', 32, 'IT', 62000.00),
('Brian', 'Adams', 45, 'Finance', 90000.00),
('Sophia', 'Clark', 26, 'HR', 48000.00),
('James', 'Lewis', 38, 'Marketing', 72000.00),
('Olivia', 'Walker', 29, 'IT', 64000.00),
('Ethan', 'Harris', 31, 'Finance', 78000.00),
('Ava', 'Martin', 27, 'Sales', 55000.00),
('William', 'Thompson', 35, 'IT', 70000.00),
('Mia', 'Anderson', 28, 'HR', 52000.00),
('Benjamin', 'Thomas', 37, 'Marketing', 75000.00),
('Charlotte', 'Robinson', 30, 'Finance', 81000.00);

SELECT * FROM EMPLOYEE;

/*GET FULL NMAE OF AN EMPLOYEE*/


DELIMITER $$ 
CREATE FUNCTION GET_FULL_NAME1(FIRST_NAME VARCHAR(50),LAST_NAME VARCHAR(50))
RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN 
DECLARE FULL_NAME VARCHAR(100);
SET FULL_NAME = CONCAT(FIRST_NAME,'',LAST_NAME) ;
RETURN FULL_NAME;
END $$
DELIMITER $$

SELECT  FIRST_NAME,LAST_NAME,GET_FULL_NAME1(FIRST_NAME,LAST_NAME) FROM  EMPLOYEE;

/*CALCULATE THE ANNUAL SALARY*/

DELIMITER $$ 
CREATE FUNCTION GET_ANNUAL_SALARY(MONTHLY_SALARY INT)
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
DECLARE ANNUAL_SALARY DECIMAL(10,2);
SET ANNUAL_SALARY =SALARY * 12;
RETURN ANNUAL_SALARY;
END $$
DELIMITER $$

SELECT FIRST_NAME,LAST_NAME,SALARY,GET_ANNUAL_SALARY(SALARY)FROM EMPLOYEE;

/* GET EMPLOYEE AGE CATEGORY*/

DELIMITER $$
CREATE FUNCTION AGE_CATEGORY(AGE INT) 
RETURNS VARCHAR(20)
DETERMINISTIC
DECLARE AGECATEGORY_ INT;
IF AGE_ CATEGORY>10 THEN
SET AGE_CATEGORY ="CHILD";
ELSEIF AGE_CATEGORY >15 AND AGE >20 THEN
SET AGE_CATEGORY = "BOY";
ELSEIF AGE_CATEGORY >20 AND AGE >30 THEN 
SET AGE_CATEGORY ="ADULT";
ELSEIF AGE_CATEGORY >40 AND AGE >50 THEN 
SET AGE_CATEGORY ="MATUARE";
ELSE IF AGE_CATEGORY >60 AND AGE >70 THEN
SET AGE_CATEGORY = "SINIOR CITIZEN";
ELSE
SET AGE_CATEGORY ="OLD AGE";
END IF;
RETURN AGE;
END$$

 DELIMITER $$
CREATE FUNCTION AGE_CATEGORY(AGE INT) 
RETURNS VARCHAR(20)
DETERMINISTIC
BEGIN 
DECLARE AGE INT;
DECLARE CATEGORY VARCHAR(20);
IF AGE <25 THEN
SET CATEGORY ="YOUNG";
ELSEIF AGE BETWEEN 25 AND 40 THEN
SET CATEGORY = 'MIDDLE AGE';
ELSE
SET CATEGORY = 'SENIOR';
END IF;
RETURN CATEGORY;
END$$
DELIMITER $$

SELECT AGE_CATEGORY(67);
SELECT AGE_CATEGORY(AGE) AS AGE_CATEGORY_COLUMN FROM EMPLOYEE;
-----------------------------------------------------------------
/* GET DEPARTMENT NAME OF AN EMPLOYEE */

DELIMITER $$
CREATE FUNCTION GET_DEPARTMENT(DEPARTMENT VARCHAR(50)) 
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN 
DECLARE DEPT VARCHAR(50);
SET DEPT = DEPARTMENT;
RETURN DEPT;
END $$
DELIMITER $$

SELECT GET_DEPARTMENT("HR") FROM EMPLOYEE;
-------------------------------------------------------------------------
/* CALCULATE BONUS (10% OF SALARY)*/

DELIMITER $$
CREATE FUNCTION BONUS_SALARY(SALARY DECIMAL(10,2)) 
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN 
DECLARE TOTAL_BONUS DECIMAL(10,2);
SET TOTAL_BONUS = SALARY * 0.10;
RETURN TOTAL_BONUS;
END $$
DELIMITER $$

SELECT FIRST_NAME,LAST_NAME,BONUS_SALARY(SALARY) AS RESULT_OF_BONUS FROM EMPLOYEE;

select * from employee;

/*CHECK IF EMPLOYEE IS ELIGIBLE FOR PROMOTION (SALARY>70K)*/

DELIMITER $$
CREATE FUNCTION GET_SALARY4(SALARY DECIMAL(10,2)) 
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN 
DECLARE ELIGIBLE DECIMAL(10,2);
IF SALARY > 70000 THEN
SET ELIGIBLE= 'YES';
ELSE
SET TOTAL_SALARY="NO";
END IF;
RETURN ELIGIBLE;
END $$
DELIMITER $$

SELECT 

DELIMITER $$
CREATE FUNCTION EMPLOYEE_COUNT(DEPT_NAME VARCHAR(50)) 
RETURNS INT
DETERMINISTIC
BEGIN 
DECLARE COUNT_EMP INT;
SELECT COUNT(*) INTO COUNT_EMP FROM EMPLOYEE WHERE DEPARTMENT =DEPT_NAME;
RETURN COUNT_EMP;
END $$
DELIMITER $$

SELECT DEPARTMENT,EMPLOYEE_COUNT(DEPARTMENT) FROM EMPLOYEE;

/*GET AVERAGE SALARY IN A DEPARTMENT*/

DELIMITER $$
CREATE FUNCTION AVERAGE_SALARY1(DEPT_NAME VARCHAR(50)) 
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN 
DECLARE AVG_SALARY DECIMAL(10,2);
SELECT AVG(SALARY) INTO AVG_SALARY FROM EMPLOYEE WHERE DEPARTMENT =DEPT_NAME ;
RETURN AVG_SALARY;
END $$
DELIMITER $$

SELECT AVERAGE_SALARY1("IT");

/*HIGHEST SALARY IN A DEPARTMENT*/

DELIMITER $$
CREATE FUNCTION DEPT_MAX(DEPT_NAME VARCHAR(50)) 
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN 
DECLARE AVG_SALARY DECIMAL(10,2);
SELECT MAX(SALARY) INTO AVG_SALARY FROM EMPLOYEE WHERE DEPARTMENT =DEPT_NAME ;
RETURN AVG_SALARY;
END $$
DELIMITER $$

SELECT DEPT_MAX("IT");

/* DEFINE SALARY GRADE*/

 DELIMITER $$
CREATE FUNCTION SAL_GRADE1(SALARY DECIMAL(10,2)) 
RETURNS VARCHAR(20)
DETERMINISTIC
BEGIN 
DECLARE SAL_GRADE VARCHAR(30);
IF SALARY >= 90000 THEN
SET  SAL_GRADE ='A';
ELSEIF SALARY BETWEEN 75000 AND 89999 THEN
SET SAL_GRADE = 'B';
ELSEIF SALARY BETWEEN 60000 AND 74999 THEN
SET SAL_GRADE = 'C';
ELSEIF SALARY BETWEEN 45000 AND 59999 THEN
SET SAL_GRADE = 'D';
ELSE
SET SAL_GRADE ='E';
END IF;
RETURN SAL_GRADE;
END$$
DELIMITER $$

SELECT SALARY,SAL_GRADE1(SALARY) AS SAL_GRADE FROM EMPLOYEE;