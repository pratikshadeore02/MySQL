CREATE DATABASE TRIGGER_1;
USE TRIGGER_1;

CREATE TABLE COURSE2(
COURSE_ID INT,
COURSE_DESC VARCHAR(50),
COURSE_MENTOR VARCHAR(50),
COURSE_PRICE INT,
COURSE_DISCOUNT INT,
COURSE_DATE DATE,
USER_INFO VARCHAR(50)
);
DROP TABLE COURSE2;
SELECT USER()
SELECT SYSDATE()

DELIMITER //
CREATE TRIGGER COURSE_BEFORE_INSERT
BEFORE INSERT
ON COURSE2 FOR EACH ROW 
BEGIN
DECLARE USER_VAL VARCHAR(50);
SET NEW.COURSE_DATE = SYSDATE();
SELECT USER() INTO USER_VAL;
SET NEW.USER_INFO = USER_VAL;

INSERT INTO REF_COURSE VALUES(SYSDATE() , USER_VAL);
END; //

CREATE TABLE REF_COURSE(
RECORD_INSERT_DATE DATE,
RECORD_INSERT_USER VARCHAR(50)
);
SELECT * FROM REF_COURSE;
INSERT INTO COURSE2(COURSE_ID,COURSE_DESC,COURSE_MENTOR,
COURSE_PRICE,COURSE_DISCOUNT) VALUE(101,"FSDA","ALPA",1000,10);


CREATE TABLE TEST1(
C1 VARCHAR(50),
C2 DATE,
C3 INT)

CREATE TABLE TEST2(
C1 VARCHAR(50),
C2 DATE,
C3 INT)

CREATE TABLE TEST3(
C1 VARCHAR(50),
C2 DATE,
C3 INT)


DELIMITER //
CREATE TRIGGER TO_UPDATE_OTHERS
BEFORE INSERT ON TEST1 FOR EACH ROW
BEGIN
INSERT INTO TEST2 VALUES("XYZ",SYSDATE(),123354);
INSERT INTO TEST3 VALUES("ABC123",SYSDATE(),2366);
END; //

INSERT INTO TEST1 VALUES("ABC3333",SYSDATE(),234234);
INSERT INTO TEST1 VALUES("JALPA",SYSDATE(),234234);

SELECT * FROM TEST1;
SELECT * FROM TEST2;
SELECT * FROM TEST3;

INSERT INTO TEST2 VALUES("PRATIKSHA",SYSDATE(),234234);
INSERT INTO TEST3 VALUES("PRATU",SYSDATE(),234234);

DELIMITER //
CREATE TRIGGER TO_UPDATE_OTHERS_TABLE
BEFORE INSERT ON TEST1 FOR EACH ROW
BEGIN
UPDATE TEST2 SET C1 = 'JALPA' WHERE C1 = 'XYZ';
DELETE FROM TEST3 WHERE C1 = 'MK12';
END; // 

INSERT INTO TEST1 VALUES("HARSH",SYSDATE(),977897);

DELIMITER //
CREATE TRIGGER TO_DELETE_OTHERS_TABLE
AFTER INSERT ON TEST1 FOR EACH ROW
BEGIN
INSERT INTO TEST3 VALUES("AFTER DELETE",SYSDATE(),435457);
END; //

SELECT * FROM TEST1;
DELETE FROM TEST1 WHERE C1 ='HARSH';
SELECT * FROM TEST3;

DELIMITER //
CREATE TRIGGER TO_DELETE_OTHERS_BEFORE
BEFORE DELETE ON TEST1 FOR EACH ROW
BEGIN
INSERT INTO TEST3 VALUES("BEFORE DELETE",SYSDATE(),435457);
END; //


DELIMITER //
CREATE TRIGGER TO_DELETE_OTHERS_BEFORE_OBSERVATION2
BEFORE DELETE ON TEST1 FOR EACH ROW
BEGIN
INSERT INTO TEST2(C1,C2,C3) VALUES(OLD.C1,OLD.C2,OLD.C3);
END; //

DELETE FROM TEST1 WHERE C1='JALPA';

DELIMITER //
CREATE TRIGGER TO_UPDATE_OTHERS
AFTER UPDATE ON TEST1 FOR EACH ROW
BEGIN
INSERT INTO TEST3(C1,C2,C3) VALUES('X',SYSDATE(),786);
END; //
DROP TRIGGER TO_UPDATE_OTHERS;
UPDATE TEST1 SET C1 = "PRATU" WHERE C1="JALPA";
SELECT * FROM TEST2;
SELECT * FROM TEST1;

DELIMITER //
CREATE TRIGGER TO_UPDATE_OTHERS_BEFORE
BEFORE UPDATE ON TEST1 FOR EACH ROW
BEGIN
INSERT INTO TEST2(C1,C2,C3) VALUES(NEW.C1,NEW.C2,NEW.C3);
END; //

UPDATE TEST1 SET C1 = "INSERT ROW" WHERE C1="JALPA";

CREATE TABLE EMPLOYEES(
ID INT AUTO_INCREMENT PRIMARY KEY,
NAME VARCHAR(100) NOT NULL,
AGE INT NOT NULL,
DEPARTMENT VARCHAR(50),
SALARY DECIMAL(10,2),
ROLE VARCHAR(50),
HIRE_DATE DATE
);

/* BEFORE INSERT TRIGGER NEW RECORD HAS A NEGATIVE SALARY,IT WILL BE SET TO 0 BEFORE INSEERTION*/

INSERT INTO EMPLOYEES(NAME,AGE,DEPARTMENT,SALARY,ROLE,HIRE_DATE) VALUE("PRATIKSHA","34","IT",50000.00,"DATA ANALAYST",SYSDATE())

SELECT * FROM EMPLOYEES;

DELIMITER //
CREATE TRIGGER BEFORE_INSERT_EMPLOYEES
BEFORE INSERT
ON EMPLOYEES FOR EACH ROW 
BEGIN
IF NEW.SALARY < 0 THEN
 SET NEW.SALARY = 0;
 END IF;
 END; //

DELIMITER //
CREATE TRIGGER enforce_name_and_calculate_salary
BEFORE INSERT ON BR
FOR EACH ROW
BEGIN
     declare user_val1 varchar(30);
     set new.TIME_SYS = sysdate();
     select user() into user_val1;
     set new.USERS_SYS = user_val1;
    IF LEFT(NEW.Name, 1) = 'S' THEN
      SET NEW.Final_Salary = NEW.Salary + NEW.Incentive;
      END IF;  
END; //


delimiter //
create trigger TO_INSERT1_OTHER_TABLE
AFTER insert
on BR for each row
begin
      
      INSERT INTO BR (NAME,MAIL_ID,PHONE_NUMBER,ADDRESS,USERS_SYS,TIME_SYS,SALARY,INCENTIVE,FINAL_SALARY)
      VALUES ("BHARGAV","bHrgv@gmail.com",8511991051,"BHAVNAGAR",USER(),SYSDATE(),50000,5000,55000);

end; //

delimiter //
create trigger TO_BEFORE_UPDATE
BEFORE UPDATE
on BR for each row
begin
      IF NEW.SALARY < OLD.SALARY * 1.05 THEN
      SET NEW.SALARY = OLD.SALARY * 1.05;
      END IF;
end; //


/* AFTER INSERT TRIGGER AFTER INSERTING AN EMPLOYEE THE ACTION IS LOGGED INTO EMPLOYEE_AUDIT.*/

DELIMITER //
CREATE TRIGGER AFTER_INSERT_EMPLOYEE1
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW 
BEGIN
INSERT INTO EMPLOYEE_AUDIT (EMPLOYEE_ID, ACTION_A,ACTION_DATE)
VALUES(NEW.ID,'INSERT', NOW());
 END; //
 
 CREATE TABLE EMPOLYEE_AUDIT(
 EMPLOYEE_ID INT(10),
 ACTION_A VARCHAR(40),
 ACTION_DATE DATE);
 
 INSERT INTO EMPOYEES(NAME,AEG,DEPARTMENT,SALARY,ROLE,HIRE_DATE) VALUE("PRATIKSHA","34","IT",50000.00,"DATA ANALAYST",SYSDATE());
 
 /*BEFORE UPDATE TRIGGER
 ENSURE THAT SALARY INCREASES ARE AT LEAST 5% */
 
delimiter //
create trigger BEFORE_UPDATE_SALARY
BEFORE UPDATE
on EMPLOYEES for each row
begin
      IF NEW.SALARY < OLD.SALARY * 1.05 THEN
      SET NEW.SALARY = OLD.SALARY * 1.05;
      END IF;
end; //


/* AFTER UPDATE TRIGGER
LOGS CHANGES IN SALARY*/

DELIMITER //
CREATE TRIGGER AFTER_UPDATE_SALARY
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW 
BEGIN
INSERT INTO EMPLOYEE_AUDIT (EMPLOYEE_ID,OLD_SALARY,NEW_SALARY,CHANGE_DATE)
VALUES(OLD.ID,OLD.SALARY,NEW.SALARY, NOW());
 END; //

/* BEFORE DELETE TRIGGER
PREVENTS DELETION OF CERTAIN RECORDS*/

DELIMITER //
CREATE TRIGGER BEFORE_DELETE_EMPLOYEE
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW 
BEGIN
IF OLD.ROLE = 'CEO' THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'CANNOT DELETE THE CEO!';
END IF;
 END; //
 
delete from EMPLOYEE where OLD.ROLE='CEO';


DELIMITER //
CREATE TRIGGER AFTER_DELETE_EMPLOYEE
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW 
BEGIN
INSERT INTO EMPLOYEE_AUDIT (EMPLOYEE_ID,ACTION,ACTION_DATE)
VALUES(OLD.ID,'DELETE', NOW());
 END; //


